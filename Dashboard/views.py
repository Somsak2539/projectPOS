from django.shortcuts import render,redirect
from productapp.models import Product1,Category
from django.shortcuts import get_object_or_404
from django.http import JsonResponse

from rest_framework.permissions import IsAuthenticated  #‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏∑‡πÉ‡∏´‡πâ API ‡∏ù‡∏±‡πà‡∏ájavascript ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ

from rest_framework.views import APIView # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤ API View
from rest_framework.response import Response # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤ API View
from rest_framework import status  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤ API View

from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
from decimal import Decimal #‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°

from rest_framework.permissions import AllowAny
from rest_framework.authentication import SessionAuthentication, BasicAuthentication 
#----------------------------------------------------import‡∏≠‡∏±‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ---------------------------------

from .models import SaleRecord
import json
from datetime import datetime

#-----------------------------------------------------------‡∏ï‡πà‡∏≠‡πÑ‡∏õ------------------------------------
import qrcode
import base64
from io import BytesIO
from django.http import JsonResponse
import io
from django.contrib.auth.decorators import login_required,user_passes_test # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö user.‡πÉ‡∏ô dashboard ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ

from django.utils.timezone import make_aware
from django.utils import timezone  # ‚úÖ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ timezone ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏ã‡∏ô‡πÄ‡∏ß‡∏•‡∏≤

from rest_framework.authentication import SessionAuthentication
from .authentication import CsrfExemptSessionAuthentication  # ‚úÖ Import class ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á ‡∏Ñ‡∏∑‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î csrf token


from django.views.decorators.csrf import ensure_csrf_cookie

# Create your views here.


def ShowForDisplay(request):
    
    return render(request,"ShowForDisplay.html")


def Recipe(request):
    
    return render(request,"Recipe.html")



@login_required
def check_auth(request):
    return JsonResponse({"authenticated": True, "user": request.user.username})



def is_special_admin(user):
    return user.is_authenticated and user.groups.filter(name='Dashboards').exists()


from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
import json



def product_list_ajax(request):
    
    return render(request,"product_list_ajax.html")


def get_product_list(request):
    products = list(Product1.objects.values("id", "name", "price", "stock", "barcode"))
    return JsonResponse({"products": products})


@login_required(login_url='/login_cover/')
@user_passes_test(is_special_admin)
def ShowDashBoard(request): 
    print(f"User: {request.user}, Authenticated: {request.user.is_authenticated}")
    print(f"Checking Group: {request.user.groups.all()}")

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    ProductStock = Product1.objects.filter(stock__lt=10).values("id", "name", "stock","updated_at")
    Products = Product1.objects.filter(is_trending=True)

    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏ô‡∏•‡∏π‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤  
    all_product = Product1.objects.all().order_by("name")  # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Product1 
    print(f"Total Products: {all_product.count()}")  # Debug ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    
    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà stock < 10 ‡πÅ‡∏•‡∏∞‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    total_product_count = Product1.objects.filter(stock__lt=10).count()
    print ("‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",total_product_count);
    
    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    filter2 = Category.objects.all()
    
      # ‚úÖ ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å `GET` Request
    categories = Category.objects.all()
    category_id = request.GET.get('category', None)
    
    min_price = request.GET.get('min_price', None)
    max_price = request.GET.get('max_price', None)
    sort_by = request.GET.get('sort', 'default')

    print(f"üü¢ Category ID: {category_id}, Min Price: {min_price}, Max Price: {max_price}, Sort: {sort_by}")
    
    
    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    products = Product1.objects.all()
    
    
    
     # ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
    if category_id and category_id.isdigit():
        products = products.filter(category_id=int(category_id))
    
        print(f"‚úÖ Filtered by Category ({category_id}): {products.count()} items found")

    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
        return render(request, 'product_list_ajax.html', {'products': products})  # ‚úÖ ‡πÅ‡∏Å‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏õ‡∏¥‡∏î {} ‡∏Ñ‡πà‡∏≠‡∏¢‡∏°‡∏≤‡πÑ‡∏´‡∏•‡πà‡∏î‡∏π‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏±‡∏ô
    
    
    # ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô `float`)
    try:
        if min_price:
            min_price = float(min_price)
            products = products.filter(price__gte=min_price)
            print(f"‚úÖ Filtered by Min Price ({min_price}): {products.count()} items found")

        if max_price:
            max_price = float(max_price)
            products = products.filter(price__lte=max_price)
            print(f"‚úÖ Filtered by Max Price ({max_price}): {products.count()} items found")

    except ValueError:
        print("‚ö†Ô∏è Warning: ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

    # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    if sort_by == 'highest':
        products = products.order_by('-price')  # ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡πÑ‡∏õ‡∏ï‡πà‡∏≥
        print("‚úÖ Sorted by Highest Price")
    elif sort_by == 'lowest':
        products = products.order_by('price')  # ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡πÑ‡∏õ‡∏™‡∏π‡∏á
        print("‚úÖ Sorted by Lowest Price")
    elif sort_by == 'newest':
        products = products.order_by('-created_at')  # ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏™‡∏∏‡∏î
        print("‚úÖ Sorted by Newest")

    # ‚úÖ Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏≠‡∏á
    print(f"üîµ Total Products After Filtering: {products.count()}")
    
    
    
    return render(request, 
                  "Dashboard.html", 
                  { "all_product": all_product,
                    "filter1": Product1.objects.all(),
                    "categories": Category.objects.all(),
                    "filter2": filter2,
                    "ProductStock":ProductStock,
                    "total_product_count":total_product_count,
                    "products": products,
                    "categories":categories, 
                
                                         
                                     
                 })  # ‚úÖ ‡∏Ñ‡∏ß‡∏£‡πÑ‡∏°‡πà‡∏°‡∏µ `redirect()` ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ


def reduce_stock(request, product_id):
    if request.method == 'POST':
        product = get_object_or_404(Product1, id=product_id)
        quantity = int(request.POST.get('quantity', 1))  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏î‡∏à‡∏≤‡∏Å stock
        if product.stock >= quantity:
            product.stock -= quantity
            product.save()
            return JsonResponse({'success': True, 'message': f'‡∏•‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {product.stock}'})
        else:
            return JsonResponse({'success': False, 'message': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠'})
    return JsonResponse({'success': False, 'message': 'Invalid request'})



@method_decorator(csrf_exempt, name="dispatch")
class UpdateStockAPIView(APIView):
    permission_classes = [AllowAny]  # ‚úÖ ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå (‡πÉ‡∏ä‡πâ AllowAny ‡πÅ‡∏ó‡∏ô‡πÑ‡∏î‡πâ)

    def put(self, request, *args, **kwargs):
        updates = request.data.get("updates", [])

        if not updates:
            return Response({"error": "No updates provided"}, status=status.HTTP_400_BAD_REQUEST)

        response_data = []
        for update in updates:
            try:
                product = Product1.objects.filter(name=update["product"]).first()  # ‚úÖ ‡πÉ‡∏ä‡πâ `.filter().first()` ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô MultipleObjectsReturned
                if not product:
                    return Response({"error": f"Product {update['product']} not found"}, status=status.HTTP_404_NOT_FOUND)

                product.stock -= Decimal(update["quantity"])  # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Decimal product.stock=product.stock-quantity  ‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÑ‡∏õ‡∏•‡∏ö‡∏Å‡∏±‡∏ô
                if product.stock < 0:
                    return Response(
                        {"error": f"Not enough stock for product {product.name}"},
                        status=status.HTTP_400_BAD_REQUEST,
                    )
                product.save()
                response_data.append({
                    "product": product.name,
                    "updated_stock": product.stock,
                })

            except Exception as e:
                return Response({"error": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

        return Response({"updated": response_data}, status=status.HTTP_200_OK)
    
    

@ensure_csrf_cookie  # ‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ CSRF Token
def my_view(request):
    return JsonResponse({"message": "CSRF Token set"})
    
@method_decorator(csrf_exempt, name='dispatch')  # ‚úÖ ‡∏õ‡∏¥‡∏î CSRF Protection ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ API ‡∏ô‡∏µ‡πâ
class SaveSaleRecordAPIView(APIView):
    
    authentication_classes = [CsrfExemptSessionAuthentication, BasicAuthentication]  # ‚úÖ ‡πÉ‡∏ä‡πâ CsrfExemptSessionAuthentication
    #authentication_classes = [SessionAuthentication, BasicAuthentication]
    permission_classes = [IsAuthenticated]  # ‚úÖ ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏´‡∏±‡∏™‡∏à‡∏∂‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô 
   

    def post(self, request):
        try:
            data = request.data

            # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JSON
            stock_adjustments = data.get("stockAdjustments")
            if isinstance(stock_adjustments, str):
                try:
                    stock_adjustments = json.loads(stock_adjustments)
                except json.JSONDecodeError:
                    return Response({"error": "Invalid JSON format for stock_adjustments"}, status=status.HTTP_400_BAD_REQUEST)

            # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á SaleRecord
            sale_record = SaleRecord.objects.create(
                total_amount=data["totalAmount"],
                entered_amount=data["enteredAmount"],
                change=data["change"],
                timestamp=datetime.fromisoformat(data["timestamp"]),
                stock_adjustments=data["stockAdjustments"],
                cashier=request.user
            )

            # ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            sale_record.refresh_from_db()

            # ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ JavaScript ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
            return Response({
                "message": "Sale record saved successfully!",
                "totalAmount": sale_record.total_amount,
                "enteredAmount": sale_record.entered_amount,
                "change": sale_record.change,
                "timestamp": sale_record.timestamp.isoformat(),
                "stockAdjustments": sale_record.stock_adjustments
            }, status=status.HTTP_201_CREATED)

        except KeyError as e:
            return Response({"error": f"Missing key: {str(e)}"}, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            return Response({"error": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    
            
        
        


def calculate_crc16(data: str) -> str:
    """
    ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤ CRC16 ‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô CCITT-FALSE
    :param data: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö string
    :return: ‡∏Ñ‡πà‡∏≤ CRC16 ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö hexadecimal
    """
    poly = 0x1021
    crc = 0xFFFF

    for byte in data.encode('utf-8'):
        crc ^= (byte << 8)
        for _ in range(8):
            if crc & 0x8000:
                crc = (crc << 1) ^ poly
            else:
                crc <<= 1
            crc &= 0xFFFF  # ‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï 16-bit

    return f"{crc:04X}"  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö hexadecimal 4 ‡∏´‡∏•‡∏±‡∏Å

def generate_promptpay_qr(request):
    phone_number = request.GET.get('phone_number')  # ‡∏£‡∏±‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
    amount = request.GET.get('amount')  # ‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô

    if not phone_number or not amount:
        return JsonResponse({"error": "Missing phone_number or amount."}, status=400)

    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢ 66)
        if phone_number.startswith("0"):
            phone_number = "66" + phone_number[1:]

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Content ‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô PromptPay
        payload_format_indicator = "000201"
        point_of_initiation_method = "010211"
        merchant_account_info_template = "2937"
        promptpay_id = f"0016A000000677010111011300{phone_number}"
        country_code = "5802TH"
        transaction_currency = "5303764"
        transaction_amount = f"5406{float(amount):06.2f}"
        checksum_tag = "6304"
        Add_amount="FCA2"

        # Assemble the full data string before checksum
        qr_content = (
            payload_format_indicator +
            point_of_initiation_method +
            merchant_account_info_template +
            promptpay_id +
            country_code +
            transaction_currency +
            transaction_amount +
            checksum_tag+
            Add_amount
        )

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì CRC16
        crc_value = calculate_crc16(qr_content[:-4])  # Exclude placeholder checksum
        final_qr_content = qr_content[:-4] + crc_value

        # Debug: ‡πÅ‡∏™‡∏î‡∏á QR Content ‡πÅ‡∏•‡∏∞ CRC16
        print("Final QR Content:", final_qr_content)

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code
        qr = qrcode.QRCode(box_size=10, border=4)
        qr.add_data(final_qr_content)
        qr.make(fit=True)

        # ‡πÅ‡∏õ‡∏•‡∏á QR Code ‡πÄ‡∏õ‡πá‡∏ô base64
        buffer = io.BytesIO()
        img = qr.make_image(fill_color="black", back_color="white")  # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å QR Code
        img.save(buffer, format="PNG")  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å QR Code ‡∏•‡∏á‡πÉ‡∏ô buffer
        qr_code_base64 = base64.b64encode(buffer.getvalue()).decode()

        return JsonResponse({"qr_code": qr_code_base64, "content": final_qr_content})

    except ValueError:
        return JsonResponse({"error": "Invalid amount."}, status=400)

def CleanDisplay(request):
    
   return render (request,"Dashboard.html")