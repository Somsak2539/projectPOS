

// ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ element ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
const productContainer = document.getElementById("product-container");
const productContainer1 = document.getElementById("product-container1");
const inputBtn1 = document.querySelector(".add-to-cart-btn");
let ajaxStockAdjustments = []; // ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
let StockAdjustments = [];
let blogArray = []; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å API
const inputBtn3 = document.querySelector(".custom-button4"); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô


if (!productContainer || !productContainer1) {
    console.error(
        "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö element productContainer ‡∏´‡∏£‡∏∑‡∏≠ productContainer1 ‡πÉ‡∏ô HTML"
    );
}



// ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å API
fetch("http://localhost:8080/blog/list/")
    .then((response) => response.json())
    .then((data) => {
        blogArray = data; // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
        console.log("‚úÖ API Data Loaded:", blogArray);
    })
    .catch((error) => console.error("‚ùå Error fetching data:", error));








document.addEventListener("click", function (event) {
    if (event.target.classList.contains("add-to-cart-btn")) {
        const productId = event.target.dataset.productId;

        if (blogArray.length === 0) {
            console.warn("‚ö†Ô∏è blogArray ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API");
            return;
        }

        const product = blogArray.find((item) => item.id == productId);
        if (!product) {
            console.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ID:", productId);
            return;
        }

        console.log("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ AJAX:", product.name);

        // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å input field
        const inputField = document.getElementById(`quantity-${productId}`);
        if (!inputField) {
            console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö input field id="quantity-${productId}"`);
            return;
        }

        let addedQuantity = parseFloat(inputField.value) || 1;
        if (addedQuantity < 1) {
            console.warn("‚ö†Ô∏è ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0");
            return;
        }

        let totalProfit = product.profitprice * addedQuantity;
        let totalPrice = product.price * addedQuantity;

        // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô ajaxStockAdjustments ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        let existingProduct = ajaxStockAdjustments.find((item) => item.product === product.name);

        if (existingProduct) {
            existingProduct.quantity += addedQuantity; // ‚úÖ ‡∏£‡∏ß‡∏° quantity ‡πÄ‡∏î‡∏¥‡∏°
            existingProduct.totalProfit += totalProfit;
            existingProduct.TotalPrice += totalPrice;
        } else {
            ajaxStockAdjustments.push({
                product: product.name,
                quantity: addedQuantity,
                totalProfit: totalProfit,
                TotalPrice: totalPrice
            });
        }

        console.log("üì§ ajaxStockAdjustments ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:", ajaxStockAdjustments);
        
        document.dispatchEvent(new CustomEvent("updateStock", { detail: ajaxStockAdjustments }));

        updateCartTable(product, addedQuantity);
        updateTotalAmount();





        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        updateCartTable(product, addedQuantity);
        updateTotalAmount(); // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡πÉ‡∏´‡∏°‡πà

        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        if (productContainer) {
            productContainer.innerHTML = product.image
                ? `<div class="img2"><img src="${product.image}" alt="${product.name}" /></div>`
                : `<div class="img2">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</div>`;
        }

        if (productContainer1) {
            productContainer1.innerHTML = `
                  <h6>
                      - ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô stock: ${product.stock} pcs <br />
                      - ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ${product.name} <br />
                      - ‡∏£‡∏≤‡∏Ñ‡∏≤: ${product.price} ‡∏ö‡∏≤‡∏ó <br />
                  </h6>`;
        }


      



        // ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        const calculatorDisplay = document.getElementById("calculatorDisplay");
        if (calculatorDisplay) {
            calculatorDisplay.textContent = "0";
        } else {
            console.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö element calculatorDisplay ‡πÉ‡∏ô HTML");
        }

        selectedItem = "";
    }
});









// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
function updateCartTable(product, quantity) {
    console.log("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ product:", product);

    if (!product || !product.name) {
        console.error("‚ùå Error: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠ product.name ‡πÄ‡∏õ‡πá‡∏ô undefined!");
        return;
    }

    const cartBody = document.getElementById("itemTableBody");

    // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å ajaxStockAdjustments ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å <td>
    let updatedProduct = ajaxStockAdjustments.find(item => item.product === product.name);

    if (!updatedProduct) {
        console.warn(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ${product.name} ‡πÉ‡∏ô ajaxStockAdjustments`);
        return;
    }

    let existingRow = document.querySelector(`#itemTableBody tr[data-barcode="${product.barcode}"]`);

    if (existingRow) {
        console.log("üü¢ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á:", product.name);

        let quantityCell = existingRow.querySelector(".cart-quantity");
        let totalCell = existingRow.querySelector(".cart-total");

        // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å ajaxStockAdjustments
        let newQuantity = updatedProduct.quantity;
        let newTotalPrice = updatedProduct.TotalPrice;

        quantityCell.innerText = newQuantity.toFixed(2);
        totalCell.innerText = newTotalPrice.toLocaleString(undefined, {
            minimumFractionDigits: 2,
            maximumFractionDigits: 2,
        }) + " ‡∏ö‡∏≤‡∏ó";

    } else {
        console.log("üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á:", product.name);
        let row = document.createElement("tr");
        row.setAttribute("data-barcode", product.barcode); // ‡πÉ‡∏ä‡πâ barcode ‡πÄ‡∏õ‡πá‡∏ô identifier

        row.innerHTML = `
            <td class="1border p-2">${product.id}</td>
            <td class="1border p-2">${product.barcode}</td>
            <td class="1border p-2">${product.name}</td>
            <td class="1border p-2">Kg/pcs</td>
            <td class="1border p-2 cart-quantity">${updatedProduct.quantity.toFixed(2)}</td>
            <td class="1border p-2 cart-total">${updatedProduct.TotalPrice.toLocaleString(undefined, {
            minimumFractionDigits: 2,
            maximumFractionDigits: 2,
        })} ‡∏ö‡∏≤‡∏ó</td>
            <td class="1border p-2">${product.stock}</td>
            <td class="1border p-2">
                <button type="button" class="btn btn-danger remove-item">‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</button>
            </td>
        `;
        cartBody.appendChild(row);
    }

    addRemoveEvent(); // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Event Listener
}









// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
function updateTotalAmount() {
    let totalAmount = ajaxStockAdjustments.reduce(
        (sum, item) => sum + item.TotalPrice,
        0
    );
    document.getElementById(
        "totalAmount"
    ).innerText = `${totalAmount.toLocaleString(undefined, {
        minimumFractionDigits: 2,
        maximumFractionDigits: 2,
    })} ‡∏ö‡∏≤‡∏ó`;
}

function addRemoveEvent() {
    document.querySelectorAll(".remove-item").forEach((button) => {
        button.addEventListener("click", function () {
            let row = this.closest("tr");
            let productName = row.querySelector("td:nth-child(3)").innerText;

            // ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á
            row.remove();

            // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å ajaxStockAdjustments
            console.log("‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö:", ajaxStockAdjustments);
            ajaxStockAdjustments = ajaxStockAdjustments.filter(
                (item) => item.product !== productName
            );
            console.log("‡∏´‡∏•‡∏±‡∏á‡∏•‡∏ö:", ajaxStockAdjustments);




            if (existingProduct) {
                console.log("üîÑ ‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß:", existingProduct);
                console.log("üìå ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°:", addedQuantity);

                existingProduct.quantity += addedQuantity;
                existingProduct.totalProfit += totalProfit;
                existingProduct.TotalPrice += totalPrice;
            } else {
                console.log("üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà:", product.name);

                ajaxStockAdjustments.push({
                    product: product.name,
                    quantity: addedQuantity,
                    totalProfit: totalProfit,
                    TotalPrice: totalPrice
                });
            }

            // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡πÑ‡∏õ script.js
            console.log("üì¶ ajaxStockAdjustments (‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô ajax.js):", ajaxStockAdjustments);

            // ‚úÖ ‡∏™‡πà‡∏á Event ‡πÑ‡∏õ‡πÉ‡∏´‡πâ script.js
            document.dispatchEvent(new CustomEvent("updateStock", { detail: ajaxStockAdjustments }));
            console.log("üì§ ‡∏™‡πà‡∏á Event updateStock ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ script.js:", ajaxStockAdjustments);

            // ------------------------------‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï LocalStorage ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏ü‡∏Ñ‡πå---------------------------------
            localStorage.setItem("ajaxStockAdjustments", JSON.stringify(ajaxStockAdjustments));
            // ‡∏™‡πà‡∏á Event ‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏∑‡πà‡∏ô (‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
            document.dispatchEvent(new CustomEvent("updateStock", { detail: ajaxStockAdjustments }));

            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡πÉ‡∏´‡∏°‡πà
            updateTotalAmount();
        });
    });
}

// ------------------------------------------------------------------------‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏≠‡∏î update Stock-------------------------------------



//********************************************************************* */

// ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å API
fetch("http://localhost:8080/blog/list/")
    .then((response) => response.json())
    .then((data) => {
        blogArray = data;
        console.log("‚úÖ API Data Loaded:", blogArray);
    })
    .catch((error) => console.error("‚ùå Error fetching data:", error));

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ CSRF Token
function getCookie(name) {
    let cookieValue = null;
    if (document.cookie && document.cookie !== '') {
        let cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
            let cookie = cookies[i].trim();
            if (cookie.startsWith(name + '=')) {
                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                break;
            }
        }
    }
    return cookieValue;
}







