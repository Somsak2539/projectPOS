from django.shortcuts import render
from django.urls import path
from productapp.models import Product1,Category #‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å folder product ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏Ñ‡πå models ‡πÅ‡∏•‡πâ‡∏ß‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• product 1 ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô 
from Dashboard.models import SaleRecord
from .models import Circulation
from Dashboard.views import SaveSaleRecordAPIView
from datetime import datetime, timedelta
from django.db.models import Sum  # ‚úÖ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Sum
from django.contrib import messages
from django.http import HttpResponse
from django.utils.timezone import now
from django.http import JsonResponse
from collections import defaultdict
from django.shortcuts import render, redirect, get_object_or_404
from decimal import Decimal, InvalidOperation
import pytz
import json  # ‚úÖ ‡πÉ‡∏ä‡πâ json.loads() ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô string
from django.db.models.functions import TruncDate, TruncWeek, TruncMonth  #‡∏ï‡∏±‡∏î timestamp ‡πÄ‡∏õ‡πá‡∏ô ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô,‡∏ï‡∏±‡∏î timestamp ‡πÄ‡∏õ‡πá‡∏ô ‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå,‡∏ï‡∏±‡∏î timestamp ‡πÄ‡∏õ‡πá‡∏ô ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô

#‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô---------------------------------
from django.shortcuts import render,redirect #
from django.contrib import messages,auth         #import messages ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
from django.contrib.auth.models import  User,auth # ‡∏Å‡∏≤‡∏£ import User ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ô‡∏µ‡πâ 
#------------------------‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏â‡∏û‡∏£‡∏≤‡∏∞‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô groping ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÑ‡∏î‡πâ
from django.contrib.auth.models import User, Group
from django.contrib.auth.decorators import login_required,user_passes_test

from django.contrib import messages,auth
from itertools import groupby
from django.utils import timezone
#@user_passes_test(is_special_admin)


# ‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏¥‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô group ‡πÑ‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏´‡∏ô‡∏∂‡πà‡∏á

def has_permission(user):
    """ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ User ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° 'group1' ‡∏´‡∏£‡∏∑‡∏≠ 'SpecialAdmin' """
    in_group1 = user.is_authenticated and user.groups.filter(name='group1').exists()
    in_special_admin = user.is_authenticated and user.groups.filter(name='SpecialAdmin').exists()
    
    # Debugging
    print(f"üîç Checking Permissions for {user.username}: Group1={in_group1}, SpecialAdmin={in_special_admin}")

    return in_group1 or in_special_admin  # ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Å‡πá‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô


def is_special_admin(user):
    print(f"Checking access for: {user}")
    print(f"User Authenticated: {user.is_authenticated}")
    print(f"User Groups: {user.groups.all()}")
    return user.is_authenticated and user.groups.filter(name='SpecialAdmin').exists()

# ‚úÖ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏à AJax
def apps_ecommerceCartAjax(request):
    
    return render(request, 'apps-ecommerceCartAjax.html')


def apps_ecommerceCart(request):
    

     # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
   #Product1.objects.filter(stock__lt=10).values("id", "name", "stock","updated_at")
    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏° (Trending Products)
    Products = Product1.objects.filter(is_trending=True)
    
    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    filter2 = Category.objects.all()
    
    # ‚úÖ ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å `GET` Request
    category_id = request.GET.get('category', None)
    min_price = request.GET.get('min_price', None)
    max_price = request.GET.get('max_price', None)
    sort_by = request.GET.get('sort', 'default')
  
    search = request.GET.get('search', None)  # ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å input 'searchBarcode'
    
    # ‚úÖ Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å Query Parameters
    print(f"üü¢ Category ID: {category_id}, Min Price: {min_price}, Max Price: {max_price}, Sort: {sort_by}")


    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    products = Product1.objects.all()
    
    
     #‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    ProductStock = Product1.objects.filter(stock__lt=10)  
    total_product_count = ProductStock.count()
    print ("‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",total_product_count);
    
    
   
    
    
    # ‚úÖ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á Ajax ‡πÑ‡∏õ
    
     # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å `GET` Request
    category_id = request.GET.get('category', None)
    
     # ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
    if category_id and category_id.isdigit():
        products = products.filter(category_id=int(category_id))
        print(f"‚úÖ Filtered by Category ({category_id}): {products.count()} items found")
        
    
    # ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
    if min_price:
        products = products.filter(price__gte=min_price)
    if max_price:
        products = products.filter(price__lte=max_price)
     
     
      # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏° ID ‡∏´‡∏£‡∏∑‡∏≠ Barcode
 
        
    if search:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ search ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (‡∏´‡∏£‡∏∑‡∏≠ id) ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if search.isdigit():
            # ‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏° id ‡∏´‡∏£‡∏∑‡∏≠ barcode
            products = products.filter(id=search) | products.filter(barcode=search)
            print(f"‚úÖ Filtering by ID or Barcode: {products.count()} items found")
        else:
            # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡∏Å‡πá‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏£‡∏≠‡∏á‡πÑ‡∏î‡πâ
            products = products.filter(name__icontains=search)  # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢ `icontains`
            print(f"‚úÖ Filtering by Name or other: {products.count()} items found")
    
        
        
    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    if sort_by == 'highest':
        products = products.order_by('-price')
    elif sort_by == 'lowest':
        products = products.order_by('price')
    elif sort_by == 'newest':
        products = products.order_by('-created_at')
        
        
    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
        return render(request, 'apps-ecommerceCartAjax.html', {'products': products})  # ‚úÖ ‡πÅ‡∏Å‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏õ‡∏¥‡∏î {} ‡∏Ñ‡πà‡∏≠‡∏¢‡∏°‡∏≤‡πÑ‡∏´‡∏•‡πà‡∏î‡∏π‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏±‡∏ô
     
        
        
    
    # ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô `float`)
    try:
        if min_price:
            min_price = float(min_price)
            products = products.filter(price__gte=min_price)
            print(f"‚úÖ Filtered by Min Price ({min_price}): {products.count()} items found")

        if max_price:
            max_price = float(max_price)
            products = products.filter(price__lte=max_price)
            print(f"‚úÖ Filtered by Max Price ({max_price}): {products.count()} items found")

    except ValueError:
        print("‚ö†Ô∏è Warning: ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    
    
    
    
    
    # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    if sort_by == 'highest':
        products = products.order_by('-price')  # ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡πÑ‡∏õ‡∏ï‡πà‡∏≥
        print("‚úÖ Sorted by Highest Price")
    elif sort_by == 'lowest':
        products = products.order_by('price')  # ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡πÑ‡∏õ‡∏™‡∏π‡∏á
        print("‚úÖ Sorted by Lowest Price")
    elif sort_by == 'newest':
        products = products.order_by('-created_at')  # ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏™‡∏∏‡∏î
        print("‚úÖ Sorted by Newest")
        
     # ‚úÖ Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏≠‡∏á
    print(f"üîµ Total Products After Filtering: {products.count()}")
    

    
    return render (request,"apps-ecommerceCart.html",{
        "Products": Products,  # ‚úÖ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°
        "products": products,  # ‚úÖ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß)
        "filter1": Product1.objects.all(),  # ‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        "filter2": filter2,    # ‚úÖ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        "categories": Category.objects.all(),  # ‚úÖ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏≠‡∏µ‡∏Å‡∏ï‡∏±‡∏ß)
        "ProductStock":ProductStock,
        "total_product_count":total_product_count,
        'search': search,
        }) #‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏°‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß Return ‡∏Å‡∏±‡∏ö‡πÑ‡∏õ
    


    

def DashboardUser(request):
     return render (request,"dashboards-analytics.html") #‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏°‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß Return ‡∏Å‡∏±‡∏ö‡πÑ‡∏õ
 


def index(request):
    if request.method == "POST":
        username = request.POST.get("username")
        password = request.POST.get("password")

        if not username or not password:
            messages.warning(request, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö")
            return redirect("login_cover")

        user = auth.authenticate(username=username, password=password)
        if user is None:
            messages.warning(request, "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            return redirect("eror404")
        
        

        auth.login(request, user)
        return redirect("LayoutDashbords")  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å

        
        
    return render(request, "index.html")
 



@login_required(login_url='/login_cover/')
@user_passes_test(has_permission)

def LayoutDashbords(request):
    print(f"User: {request.user}, Authenticated: {request.user.is_authenticated}")
    print(f"Checking Group: {request.user.groups.all()}")

    # ‚úÖ ‡∏î‡∏∂‡∏á QuerySet ‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ .image.url ‡πÑ‡∏î‡πâ
    ProductStock = Product1.objects.filter(stock__lt=10)  
    total_product_count = ProductStock.count()

    print("‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", total_product_count)
    print("‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏°‡∏≤", ProductStock)

    return render(request, "LayoutDashbords.html", {"ProductStock": ProductStock, "total_product_count": total_product_count})



def appsinvoiceList(request):
    return render (request,"apps-invoiceList.html")
 
def eror404(request):
    return render (request,"404error.html")


def LayoutDashbords1(request):
    return render (request,"LayoutDashbords1.html")


def Calender(request):
     return render (request,"Calender1.html") #‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏°‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß Return ‡∏Å‡∏±‡∏ö‡πÑ‡∏õ
 

@login_required(login_url='/eror404/')  #‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏û‡∏à‡πÄ‡∏•‡∏¢‡πÑ‡∏õ‡∏ó‡∏µ‡πà url itemProduct‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏î‡πâ ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£login ‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∂‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏î‡πâ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ login ‡∏Å‡πá‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ eror404
@user_passes_test(is_special_admin,login_url='/eror404/')
def ItemProduct(request):
    
       # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å GET request
    bangkok_tz = pytz.timezone("Asia/Bangkok")
    start_date = request.GET.get('start_date', None)
    end_date = request.GET.get('end_date', None)
    
    
   
     
     #‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πà‡∏≤
    ProductStock = Product1.objects.filter(stock__lt=10)  
    total_product_count = ProductStock.count()
    print ("‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",total_product_count);
    
    #‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    #ProductStock = Product1.objects.filter(stock__lt=10).values("id", "name", "stock","updated_at")
  
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á
    records = SaleRecord.objects.all().order_by('-timestamp')

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if not start_date or not end_date:
        #messages.error(request, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á!")  # ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        return render(request, "ItemProduct.html", {
            "records": [],
            "total_sum": 0,
            "total_profit_sum": 0,
            "start_date": start_date or "",
            "end_date": end_date or "",
            "ProductStock":ProductStock,
            "total_product_count":total_product_count,
        })

    try:
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å string ‡πÄ‡∏õ‡πá‡∏ô datetime object
        start_date_obj = datetime.strptime(start_date, "%Y-%m-%d").date()
        end_date_obj = datetime.strptime(end_date, "%Y-%m-%d").date()

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
        if start_date_obj > end_date_obj:
            messages.error(request, "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î!")
            return render(request, "ItemProduct.html", {
                "records": [],
                "total_sum": 0,
                "total_profit_sum": 0,
                "start_date": start_date,
                "end_date": end_date,
                "ProductStock":ProductStock,
                "total_product_count":total_product_count,
            })

        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        records = SaleRecord.objects.filter(timestamp__date__range=[start_date_obj, end_date_obj]).order_by('-timestamp')
       
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
        total_sum = records.aggregate(total=Sum("total_amount"))["total"] or 0
        
          # ‡∏î‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Stockadjustment ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏° Total ‡∏Ç‡∏≠‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ì
        total_profit_sum = sum(sum(item.get("totalProfit", 0) for item in record.stock_adjustments or [])for record in records if record.stock_adjustments )

       

    except ValueError:
        messages.error(request, "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô YYYY-MM-DD")
        return render(request, "ItemProduct.html", {
            "records": [],
            "total_sum": 0,
            "total_profit_sum": 0,
            "start_date": start_date,
            "end_date": end_date,
            "ProductStock":ProductStock,
            "total_product_count":total_product_count,
        })

    return render(request, "ItemProduct.html", {
        "records": records,
        "total_sum": total_sum,
        "total_profit_sum": total_profit_sum,
        "start_date": start_date_obj.strftime('%d/%m/%Y'),
        "end_date": end_date_obj.strftime('%d/%m/%Y'),
        "ProductStock":ProductStock,
        "total_product_count":total_product_count,
    })





def logout_cover(request):
    print(f"Before Logout - User: {request.user}")  # Debug ‡∏Å‡πà‡∏≠‡∏ô Logout
    auth.logout(request)
    request.session.flush()  # ‚úÖ ‡∏•‡πâ‡∏≤‡∏á Session ‡πÉ‡∏´‡πâ‡∏´‡∏°‡∏î
    print(f"After Logout - User: {request.user}")  # Debug ‡∏´‡∏•‡∏±‡∏á Logout
    return redirect("login_cover")









def login_cover(request):
    if request.method == "POST":
        username = request.POST.get("username")
        password = request.POST.get("password")

        if not username or not password:
            messages.warning(request, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö")
            return redirect("login_cover")

        user = auth.authenticate(username=username, password=password)
        if user is None:
            messages.warning(request, "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            return redirect("eror404")
        
        

        auth.login(request, user)
        return redirect("LayoutDashbords")  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å

        
        
    return render(request, "login-cover.html")
 
def register_cover(request):
    return render(request,"register-cover.html") # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≤‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
 

@login_required(login_url='/login_cover/') # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≤‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
@user_passes_test(is_special_admin,login_url='/eror404/') # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏¥‡∏Å‡πá‡∏à‡∏∞direct ‡πÑ‡∏õ‡∏ó‡∏µ‡πà url‡∏ô‡∏±‡πâ ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏¥‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÇ‡∏î‡∏¢‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡∏ô‡∏≠‡∏Å‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏±‡πâ‡∏Å‡πá‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÑ‡∏î‡πâ
def EditAdd(request,id):
    
    
    product = get_object_or_404(Product1, pk=id)
    filter2 = Category.objects.all()
    
    filter1= Product1.objects.all()
    filter2=Category.objects.all()
    product=Product1.objects.get(pk=id)
    
    
    #‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    ProductStock = Product1.objects.filter(stock__lt=10)  
    total_product_count = ProductStock.count()
    print ("‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",total_product_count);
    
    #‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
   # ProductStock = Product1.objects.filter(stock__lt=10).values("id", "name", "stock","updated_at")
    
    if request.method == "POST":
        print(request.POST)  # ‚úÖ Debug ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤

        # ‚úÖ ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
        product_name = request.POST.get("product_name", "").strip()
        product_price = request.POST.get("product_price", "").strip()
        stock = request.POST.get("stock", "").strip()
        profitprice = request.POST.get("profitprice", "").strip()
        barcode = request.POST.get("barcode", "").strip()
        category_id = request.POST.get("taxApplicable", "").strip()
        description = request.POST.get("productDescription", "").strip()

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏á
        if not product_name or not product_price or not stock or not profitprice or not barcode:
            return render(request, "ProductPreview.html", {
                "product": product,
                "filter2": filter2,
                "error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á"
            })

        try:
            product_price = Decimal(product_price)
            stock = Decimal(stock)
            profitprice = Decimal(profitprice)
        except InvalidOperation:
            return render(request, "ProductPreview.html", {
                "product": product,
                "filter2": filter2,
                "error": "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"
            })

        # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        product.name = product_name
        product.price = product_price
        product.stock = stock
        product.profitprice = profitprice
        product.barcode = barcode
        product.description = description

        if category_id:
            try:
                product.category = Category.objects.get(pk=category_id)
            except Category.DoesNotExist:
                return render(request, "ProductPreview.html", {
                    "product": product,
                    "filter2": filter2,
                    "error": "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"
                })

        product.save()
        return redirect("EditAdd", id=product.id)
    
    
    return render (request,"EditAdd.html",{"product":product,"filter1":filter1,"filter2":filter2,"ProductStock":ProductStock,"total_product_count":total_product_count})




@login_required(login_url='/login_cover/')
@user_passes_test(is_special_admin,login_url='/eror404/')
def ProductPreview(request):
    """
    ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
    """
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
   #Product1.objects.filter(stock__lt=10).values("id", "name", "stock","updated_at")
    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏° (Trending Products)
    Products = Product1.objects.filter(is_trending=True)

    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    filter2 = Category.objects.all()

    # ‚úÖ ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å `GET` Request
    category_id = request.GET.get('category', None)
    min_price = request.GET.get('min_price', None)
    max_price = request.GET.get('max_price', None)
    sort_by = request.GET.get('sort', 'default')

    # ‚úÖ Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å Query Parameters
    print(f"üü¢ Category ID: {category_id}, Min Price: {min_price}, Max Price: {max_price}, Sort: {sort_by}")

    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    products = Product1.objects.all()
    
    
    #‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    ProductStock = Product1.objects.filter(stock__lt=10)  
    total_product_count = ProductStock.count()
    print ("‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",total_product_count);
    

    # ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
    if category_id and category_id.isdigit():
        products = products.filter(category_id=int(category_id))
        print(f"‚úÖ Filtered by Category ({category_id}): {products.count()} items found")

    # ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô `float`)
    try:
        if min_price:
            min_price = float(min_price)
            products = products.filter(price__gte=min_price)
            print(f"‚úÖ Filtered by Min Price ({min_price}): {products.count()} items found")

        if max_price:
            max_price = float(max_price)
            products = products.filter(price__lte=max_price)
            print(f"‚úÖ Filtered by Max Price ({max_price}): {products.count()} items found")

    except ValueError:
        print("‚ö†Ô∏è Warning: ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

    # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    if sort_by == 'highest':
        products = products.order_by('-price')  # ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡πÑ‡∏õ‡∏ï‡πà‡∏≥
        print("‚úÖ Sorted by Highest Price")
    elif sort_by == 'lowest':
        products = products.order_by('price')  # ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡πÑ‡∏õ‡∏™‡∏π‡∏á
        print("‚úÖ Sorted by Lowest Price")
    elif sort_by == 'newest':
        products = products.order_by('-created_at')  # ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏™‡∏∏‡∏î
        print("‚úÖ Sorted by Newest")

    # ‚úÖ Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏≠‡∏á
    print(f"üîµ Total Products After Filtering: {products.count()}")

    # ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Template
    return render(request, "ProductPreview.html", {
        "Products": Products,  # ‚úÖ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°
        "products": products,  # ‚úÖ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß)
        "filter1": Product1.objects.all(),  # ‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        "filter2": filter2,    # ‚úÖ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        "categories": Category.objects.all(),  # ‚úÖ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏≠‡∏µ‡∏Å‡∏ï‡∏±‡∏ß)
        "ProductStock":ProductStock,
        "total_product_count":total_product_count,
    })





@login_required(login_url='/login_cover/')
@user_passes_test(is_special_admin,login_url='/eror404/')
def Circulation1(request):
    # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å GET request
    bangkok_tz = pytz.timezone("Asia/Bangkok")
    start_date = request.GET.get('start_date', None)
    end_date = request.GET.get('end_date', None)

    #‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    ProductStock = Product1.objects.filter(stock__lt=10).values("id", "name", "stock","updated_at")
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á
    records = SaleRecord.objects.all().order_by('-timestamp')
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÅ‡∏ï‡∏∑‡∏≠‡∏ô
    ProductStock = Product1.objects.filter(stock__lt=10).values("id", "name", "stock","updated_at")
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    
    
    #‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    ProductStock = Product1.objects.filter(stock__lt=10)  
    total_product_count = ProductStock.count()
    print ("‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",total_product_count);
    
    if not start_date or not end_date:
        messages.error(request, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á!")  # ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        return render(request, "Circulation.html", {
            "records": [],
            "total_sum": 0,
            "start_date": start_date or "",
            "end_date": end_date or ""
        })

    try:
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å string ‡πÄ‡∏õ‡πá‡∏ô datetime object
        start_date_obj = datetime.strptime(start_date, "%Y-%m-%d").date()
        end_date_obj = datetime.strptime(end_date, "%Y-%m-%d").date()

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
        if start_date_obj > end_date_obj:
            messages.error(request, "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î!")
            return render(request, "Circulation.html", {
                "records": [],
                "total_sum": 0,
                "start_date": start_date,
                "end_date": end_date
            })

        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        records = SaleRecord.objects.filter(timestamp__date__range=[start_date_obj, end_date_obj]).order_by('-timestamp')

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
        total_sum = records.aggregate(total=Sum("total_amount"))["total"] or 0

    except ValueError:
        messages.error(request, "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô YYYY-MM-DD")
        return render(request, "Circulation.html", {
            "records": [],
            "total_sum": 0,
            "start_date": start_date,
            "end_date": end_date
        })

    return render(request, "Circulation.html", {
        "records": records,
        "total_sum": total_sum,
        "start_date": start_date_obj.strftime('%d/%m/%Y'),
        "end_date": end_date_obj.strftime('%d/%m/%Y'),
        "ProductStock":ProductStock,
        "total_product_count":total_product_count,
    })


@login_required(login_url='/login_cover/')
@user_passes_test(is_special_admin,login_url='/eror404/')

def Circulation2(request):
    
    filter_type = request.GET.get("filter", "year")  
    today = now()  # ‚úÖ ‡πÉ‡∏ä‡πâ timezone-aware datetime
    bangkok_tz = pytz.timezone("Asia/Bangkok")
    today = today.astimezone(bangkok_tz)
    
    if filter_type == "day":
        start_date = today  # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢
    elif filter_type == "week":
        start_date = today - timedelta(weeks=1)
    elif filter_type == "month":
        start_date = today - timedelta(days=30)
    elif filter_type == "3months":
        start_date = today - timedelta(days=90)
    elif filter_type == "6months":
        start_date = today - timedelta(days=180)
    else:  # "year"
        start_date = today - timedelta(days=365)
        

   # ProductStock = Product1.objects.filter(stock__lt=10).values("id", "name", "stock","updated_at")
    
    
    # ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡∏°‡∏π‡∏•‡∏•‡πà‡∏∞‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô
    TotlalShop = list(Product1.objects.values("name", "price", "stock"))
    print("‡∏£‡∏ß‡∏°‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:",TotlalShop);
    total_valueShop = round(sum(item["price"] * item["stock"] for item in TotlalShop), 2)


    print("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:",total_valueShop)


    
  
    
    # ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô 00:00:00 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏ô‡∏ß‡∏±‡∏ô
    start_date = start_date.replace(hour=0, minute=0, second=0, microsecond=0)
    end_date = today.replace(hour=23, minute=59, second=59, microsecond=999999)

    
    print(f"üü¢ filter_type: {filter_type}")
    print(f"üïí start_date: {start_date} ‚Üí end_date: {end_date}")
    print(f"üü¢ filter_type: {filter_type}")
    print(f"üïí start_date: {start_date}")
    
    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    records1 = SaleRecord.objects.filter(timestamp__gte=start_date).order_by('-timestamp')
    # ‚úÖ ‡∏´‡∏≤‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á total_amount
    total_sum = records1.aggregate(total=Sum("total_amount"))["total"] or 0  
    # ‡∏´‡∏≤‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á Totalsum
    daily_sales = records1.annotate(date=TruncDate('timestamp')).values('date').annotate(total=Sum('total_amount')).order_by('date') # total amout ‡∏°‡∏≤‡∏à‡∏≤‡∏Å model 
    weekly_sales = records1.annotate(week=TruncWeek('timestamp')).values('week').annotate(total=Sum('total_amount')).order_by('week')
    monthly_sales = records1.annotate(month=TruncMonth('timestamp')).values('month').annotate(total=Sum('total_amount')).order_by('month')

    # ‚úÖ ------------------------------------------------------------‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô, ‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå, ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏Å‡∏≥‡πÑ‡∏£)
   
    
    bangkok_tz = pytz.timezone("Asia/Bangkok")

# ‚úÖ ‡πÉ‡∏ä‡πâ defaultdict(float) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡∏≥‡πÑ‡∏£‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô, ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå, ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    daily_profit = defaultdict(float)
    weekly_profit = defaultdict(float)
    monthly_profit = defaultdict(float)

    # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á records1 ‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡πÑ‡∏ó‡∏¢) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ groupby ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    records1 = sorted(records1, key=lambda r: r.timestamp.astimezone(bangkok_tz).date())

# ‚úÖ ‡πÉ‡∏ä‡πâ groupby ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    for date, records_iter in groupby(records1, key=lambda r: r.timestamp.astimezone(bangkok_tz).date()):
        records = list(records_iter)  # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á iterator ‡πÄ‡∏õ‡πá‡∏ô list
        total_profit_per_day = 0  # ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà

        for record in records:
            timestamp_th = record.timestamp.astimezone(bangkok_tz)
            week = timestamp_th.isocalendar()[1]
            month = timestamp_th.strftime("%Y-%m")

            # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö stock_adjustments ‡πÄ‡∏õ‡πá‡∏ô JSON ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            stock_adjustments = record.stock_adjustments
            if isinstance(stock_adjustments, str):
                try:
                    stock_adjustments = json.loads(stock_adjustments)
                except json.JSONDecodeError:
                    stock_adjustments = []  # ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Error ‡∏Å‡∏£‡∏ì‡∏µ JSON ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á

        # ‚úÖ ‡∏£‡∏ß‡∏°‡∏Å‡∏≥‡πÑ‡∏£‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô (‡πÑ‡∏°‡πà‡∏™‡∏∞‡∏™‡∏°‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤)
            for item in stock_adjustments:
                if isinstance(item, dict):
                    total_profit = float(item.get("totalProfit", 0))
                    total_profit_per_day += total_profit  # ‚úÖ ‡∏£‡∏ß‡∏°‡∏Å‡∏≥‡πÑ‡∏£‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô

    # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡πÅ‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô (‡πÑ‡∏°‡πà‡∏™‡∏∞‡∏™‡∏°)
        daily_profit[date] = total_profit_per_day
        weekly_profit[week] += total_profit_per_day  # ‚úÖ ‡∏¢‡∏±‡∏á‡∏™‡∏∞‡∏™‡∏°‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
        monthly_profit[month] += total_profit_per_day  # ‚úÖ ‡∏¢‡∏±‡∏á‡∏™‡∏∞‡∏™‡∏°‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô

# ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô List ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö JSON Response
    daily_profit_list = [{"date": str(date), "total": total} for date, total in daily_profit.items()]
    weekly_profit_list = [{"week": week, "total": total} for week, total in weekly_profit.items()]
    monthly_profit_list = [{"month": month, "total": total} for month, total in monthly_profit.items()]

# ‚úÖ DEBUG ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤ JSON ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
    print("‚úÖ [DEBUG] ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô (sum):", daily_profit_list)
    print("‚úÖ [DEBUG] ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå (sum):", weekly_profit_list)
    print("‚úÖ [DEBUG] ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (sum):", monthly_profit_list)
    
    #--------------------------------------------------------------------------------ending‡∏Å‡∏£‡∏≤‡∏ü-------------------------------------------------
    
    
   # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    ProductStock = Product1.objects.filter(stock__lt=10)  
    total_product_count = ProductStock.count()
    print ("‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",total_product_count);
    
     
    
    

    
    # ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡∏Å‡∏≥‡πÑ‡∏£ 
    sale_records = SaleRecord.objects.all()
    
  
    # ‚úÖ ‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    total_profit = sum([
        sum(item.get("totalProfit", 0) for item in record.stock_adjustments)
        for record in sale_records
    ])

    total_price = sum([
        sum(item.get("TotalPrice", 0) for item in record.stock_adjustments)
        for record in sale_records
    ])

    # ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô ‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå ‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏Ç‡∏≠‡∏á‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ
    # ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô, ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå, ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    # ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
    product_sales = defaultdict(float)
    
    print(f"‚úÖ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Record ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤: {len(records1)}")

    for record in records1:
         
        
          for item in record.stock_adjustments:
            product_sales[item["product"]] += item["quantity"] 
     # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô JSON ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    sorted_product_sales = sorted(product_sales.items(), key=lambda x: x[1], reverse=True)
    product_sales_json = [{"x": product, "y": quantity} for product, quantity in sorted_product_sales]
    
    
           # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Database
    records1 = SaleRecord.objects.filter(timestamp__gte=start_date).order_by('-timestamp') 
  # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ JSON ‡∏´‡∏£‡∏∑‡∏≠ HTML
    if request.headers.get('Accept') == 'application/json' or request.GET.get("format") == "json":
        sales_data = [
        {   
         
            "totalProfit": sum(float(item.get("totalProfit", 0.0)) for item in record.stock_adjustments),  # ‚úÖ ‡∏£‡∏ß‡∏° totalProfit
            "TotalPrice": sum(float(item.get("TotalPrice", 0.0)) for item in record.stock_adjustments),  # ‚úÖ ‡∏£‡∏ß‡∏° TotalPrice‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πâ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ô‡∏µ‡πâ------------------
            "timestamp": record.timestamp.astimezone(bangkok_tz).strftime("%d-%m-%y %H:%M:%S"),  # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
            "total_amount": float(record.total_amount),  # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô float
            "stock_adjustments": [
                {
                    "product": item["product"],
                    "quantity": float(item["quantity"]),  # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô float
                    "totalProfit": float(item.get("totalProfit", 0.0)), 
                    "TotalPrice": float(item.get("TotalPrice", 0.0)),                                    
                }
                for item in record.stock_adjustments
            ]
            
            
        }
        for record in records1
        ]
        
         # ‚úÖ ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Sale_data
        filtered_totalProfit = sum(sale.get("totalProfit", 0.0) for sale in sales_data)
        filtered_totalPrice = sum(sale.get("TotalPrice", 0.0) for sale in sales_data)
        
            # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á product_sales_json ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
        product_sales_json = [
        {"x": product, "y": float(quantity)}  # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô float
        for product, quantity in sorted_product_sales
            ]
        
        
        #‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å json ----------------------------------------------------------------------------------------------------
        
        
    
        
        
        
        
        
        
        
        
        
        
        
        #‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å json ----------------------------------------------------------------------------------------------------
        
        
         # ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ Return API Json 
        return JsonResponse({
            
            "total_sum": float(total_sum),
            "totalProfit1": round(filtered_totalProfit, 2),
            "totalPrice1": round(filtered_totalPrice, 2),
            "totalProfit": round(total_profit, 2),
            "TotalPrice": round(total_price, 2),
            "start_date": start_date.strftime("%d-%m-%y"),
            "end_date": end_date.strftime("%d-%m-%y"),
            "sales": sales_data,
            "product_sales": product_sales_json,
            "daily_sales": list(daily_sales) if daily_sales else [],
            "weekly_sales": list(weekly_sales) if weekly_sales else [],
            "monthly_sales": list(monthly_sales) if monthly_sales else [],
            "daily_profit1": daily_profit_list,
            "weekly_profit1": weekly_profit_list,
            "monthly_profit1": monthly_profit_list,
            "total_valueShop":total_valueShop,
            
          
      
           
            }, 
            safe=False, json_dumps_params={'ensure_ascii': False})



  # ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ Return ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏≤‡∏Ñ‡πà‡∏≤‡πÑ‡∏õ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ 
    return render(request, "dashboards-analytics.html", {
        "records1": records1,
        "total_sum": total_sum,
        "totalProfit": round(total_profit, 2),
        "TotalPrice": round(total_price, 2),
        "filter_type": filter_type,
        "product_sales_json": product_sales_json,
        "ProductStock":ProductStock,
        "total_product_count":total_product_count,
        "total_valueShop":total_valueShop,
       
    })
    
    
   
    
    
    
    
    
    
    
    
    
    
    
    


def Circulation3(request):
        # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å GET parameter
    filter_type = request.GET.get("filter", "year")  # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô "year"
    
    today = datetime.now()
    
    if filter_type == "day":
        start_date = today - timedelta(days=1)
    elif filter_type == "week":
        start_date = today - timedelta(weeks=1)
    elif filter_type == "month":
        start_date = today - timedelta(days=30)
    elif filter_type == "3months":
        start_date = today - timedelta(days=90)
    elif filter_type == "6months":
        start_date = today - timedelta(days=180)
    else:  # "year"
        start_date = today - timedelta(days=365)
    
    # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    records1 = SaleRecord.objects.filter(timestamp__gte=start_date).order_by('-timestamp')

    # ‡∏´‡∏≤‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á total_amount ‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    total_sum = records1.aggregate(total=Sum("total_amount"))["total"] or 0  

    return render(request, "Circulation1.html", {
        "records1": records1,
        "total_sum": total_sum,
        "filter_type": filter_type  # ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ filter_type ‡πÑ‡∏õ‡∏¢‡∏±‡∏á template
    })
    
    
    
def bestSeller(request):
     records1 = SaleRecord.objects.all()
     
     return render (request,"LayoutDashbords.html",records1=records1);
    
#‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô ‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏∞‡πÑ‡∏£ 
#for record in SaleRecord.objects.all(): 
#   print(record.stock_adjustments)


#‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô ‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏∞‡πÑ‡∏£ 
#for record in SaleRecord.objects.all(): 
#   print(record.total_amount);


#for record1 in SaleRecord.objects.all():
     
#     print(record1.stock_adjustments);








def check_time(request):
    return HttpResponse(f"‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á Django ‡∏Ñ‡∏∑‡∏≠: {now()}")